@model ProyectoClinica.Models.Comentario
@{
    ViewBag.Title = "Nuevo Comentario";
}

<link href="~/CSS/VistaGeneral.css" rel="stylesheet" />

<style>
    .comentario-form-container {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        max-width: 900px;
        margin: 0 auto;
        padding: 20px;
        color: #333;
    }

    .form-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 25px;
        border-bottom: 3px solid #0b7b82;
        padding-bottom: 15px;
    }

        .form-header h2 {
            color: #0b7b82;
            font-size: 28px;
            margin: 0;
        }

    .btn-back {
        display: inline-flex;
        align-items: center;
        color: #0b7b82;
        text-decoration: none;
        font-weight: 600;
        transition: all 0.2s;
    }

        .btn-back:hover {
            color: #3bb4bc;
        }

        .btn-back i {
            margin-right: 8px;
        }

    .form-card {
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.08);
        padding: 30px;
        margin-bottom: 30px;
    }

    .form-section {
        margin-bottom: 30px;
        padding-bottom: 25px;
        border-bottom: 1px solid #eee;
    }

        .form-section:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .form-section h3 {
            color: #0b7b82;
            font-size: 20px;
            margin: 0 0 20px 0;
            font-weight: 600;
        }

    .form-group {
        margin-bottom: 20px;
    }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #444;
        }

    .form-control {
        width: 100%;
        padding: 12px 15px;
        border: 1px solid #ddd;
        border-radius: 6px;
        font-size: 15px;
        transition: all 0.3s;
    }

        .form-control:focus {
            border-color: #3bb4bc;
            box-shadow: 0 0 0 3px rgba(59, 180, 188, 0.2);
            outline: none;
        }

    textarea.form-control {
        resize: vertical;
        min-height: 100px;
    }

    .form-row {
        display: flex;
        gap: 20px;
    }

    .form-group.half {
        flex: 1;
    }

    .star-rating-container {
        display: flex;
        align-items: center;
        margin-top: 10px;
    }

    .stars {
        display: flex;
        flex-direction: row-reverse;
        gap: 5px;
    }

        .stars input[type="radio"] {
            display: none;
        }

        .stars label {
            cursor: pointer;
            font-size: 30px;
            transition: all 0.2s;
            color: #e0e0e0;
        }

            .stars label:hover,
            .stars label:hover ~ label,
            .stars input[type="radio"]:checked ~ label {
                color: #ffc107;
            }

    .rating-value {
        margin-left: 15px;
        font-weight: bold;
        font-size: 18px;
        color: #666;
    }

    .text-danger {
        color: #dc3545;
        font-size: 13px;
        margin-top: 5px;
        display: block;
    }

    .validation-summary {
        background-color: #f8d7da;
        border-left: 4px solid #dc3545;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 4px;
    }

    .form-actions {
        display: flex;
        gap: 15px;
        margin-top: 30px;
    }

    .btn-submit {
        background-color: #0b7b82;
        color: white;
        border: none;
        padding: 12px 25px;
        border-radius: 6px;
        font-weight: 600;
        font-size: 16px;
        cursor: pointer;
        transition: all 0.3s;
        display: flex;
        align-items: center;
    }

        .btn-submit:hover {
            background-color: #3bb4bc;
            box-shadow: 0 5px 12px rgba(59, 180, 188, 0.3);
        }

        .btn-submit i {
            margin-right: 8px;
        }

    .btn-cancel {
        background-color: #f0f0f0;
        color: #666;
        border: none;
        padding: 12px 25px;
        border-radius: 6px;
        font-weight: 600;
        font-size: 16px;
        cursor: pointer;
        text-decoration: none;
        transition: all 0.3s;
        text-align: center;
    }

        .btn-cancel:hover {
            background-color: #e0e0e0;
        }
</style>



<body>
    <div class="container-fluid">
        <!-- Contenedor de notificaciones -->
        <div id="notificationContainer" class="notification-container"></div>

        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 sidebar">
                <div class="sidebar">
                    <div class="p-3 d-flex justify-content-center">
                        <img src="~/Imagenes/Logo.png" alt="Centro Integral Santo Domingo Logo" class="img-fluid" style="max-width: 195px; height: auto;" />
                    </div>

                    <center><div class="nav-header">Plataforma</div></center>
                    <div class="nav-item">
                        <a class="nav-link">
                            <div>
                                Navegación
                            </div>

                        </a>
                        <ul class="submenu">
                            <br />
                            <a href="@Url.Action("Index", "Inventario")" class="nav-link">
                                <i class="fas fa-boxes"></i> Inventario
                            </a>
                            <br />
                            <a href="@Url.Action("VistaCON", "Contabilidad")" class="nav-link">
                                <i class="fas fa-calculator"></i> Contabilidad
                            </a>
                            <br />
                            <a href="@Url.Action("VistaAdmRep", "Reporte")" class="nav-link">
                                <i class="fas fa-chart-line"></i> Reportes
                            </a>
                        </ul>
                    </div>

                    <hr />

                    <div class="nav-item">
                        <a class="nav-link">
                            <div>
                                Administración
                            </div>

                        </a>
                        <ul class="submenu">
                            <a href="@Url.Action("Administrativo", "Administrativos")" class="nav-link">
                                <i class="fas fa-user-tie"></i> Administrativo
                            </a>
                            <br />
                            <a href="@Url.Action("Empleados", "Empleados")" class="nav-link">
                                <i class="fas fa-users"></i> Empleados
                            </a>
                            <br />
                            <a href="@Url.Action("Expedientes", "Expedientes")" class="nav-link">
                                <i class="fas fa-folder-open"></i> Expedientes
                            </a>
                            <br />
                            <a href="@Url.Action("VistaCAdmin", "Cita")" class="nav-link">
                                <i class="fas fa-calendar-check"></i> Citas
                            </a>
                        </ul>
                    </div>
                </div>
            </div>

            <!-- Main Content -->
            <div class="col-md-9 col-lg-10 ms-auto button-container">

                <div class="comentario-form-container">
                    <div class="form-header">
                        <h2>Nuevo Comentario</h2>
                    </div>

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-card">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger validation-summary" })

                            <div class="form-section">
                                <h3>Información del Comentario</h3>

                                <div class="form-group">
                                    <label>Comentario del Paciente</label>
                                    @Html.DropDownList("Id_Atencion_Cliente", ViewBag.Id_Atencion_Cliente as SelectList, "Seleccione un comentario", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Id_Atencion_Cliente, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    <label>Texto del Comentario</label>
                                    @Html.TextAreaFor(model => model.Comentario_Texto, new { @class = "form-control", rows = 4, placeholder = "Escriba el comentario aquí..." })
                                    @Html.ValidationMessageFor(model => model.Comentario_Texto, "", new { @class = "text-danger" })
                                </div>

                                <div class="form-group">
                                    <label>Fecha</label>
                                    <input type="date" name="Fecha" class="form-control"
                                           value="@(Model != null && Model.Fecha != null ? Model.Fecha.ToString("yyyy-MM-dd") : DateTime.Now.ToString("yyyy-MM-dd"))" />
                                    @Html.ValidationMessageFor(model => model.Fecha, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-section">
                                <h3>Calificación</h3>

                                <div class="star-rating-container">
                                    <div class="stars">
                                        @for (int i = 5; i >= 1; i--)
                                        {
                                            <input type="radio" id="star@(i)" name="Calificacion" value="@i" @(Model != null && Model.Calificacion == i ? "checked" : "") />
                                            <label for="star@(i)" title="@i estrellas"><i class="fas fa-star"></i></label>
                                        }
                                    </div>
                                    <span class="rating-value">0</span>
                                    @Html.ValidationMessageFor(model => model.Calificacion, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-section">
                                <h3>Estado y Categorización</h3>

                                <div class="form-row">
                                    <div class="form-group half">
                                        <label>Estado del Comentario</label>
                                        @Html.DropDownList("Id_Estado_Comentario", ViewBag.Id_Estado_Comentario as SelectList, "Seleccione un estado", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Id_Estado_Comentario, "", new { @class = "text-danger" })
                                    </div>

                                    <div class="form-group half">
                                        <label>¿Comentario Destacado?</label>
                                        @Html.DropDownList("Id_Destacado_Comentario", ViewBag.Id_Destacado_Comentario as SelectList, "Seleccione una opción", new { @class = "form-control" })
                                        @Html.ValidationMessageFor(model => model.Id_Destacado_Comentario, "", new { @class = "text-danger" })
                                    </div>
                                </div>

                                <div class="form-group">
                                    <label>¿Comentario Sensible?</label>
                                    @Html.DropDownList("Id_Sensible_Comentario", ViewBag.Id_Sensible_Comentario as SelectList, "Seleccione una opción", new { @class = "form-control" })
                                    @Html.ValidationMessageFor(model => model.Id_Sensible_Comentario, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn-submit">
                                    <i class="fas fa-save"></i> Guardar Comentario
                                </button>
                                <a href="@Url.Action("SAdComentarios")" class="btn-cancel">Cancelar</a>
                            </div>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        var itemsOcultos = [];

        // Función para ocultar un item
        function ocultarItem(id) {
            var card = document.querySelector('.payment-card[data-id="' + id + '"]');

            if (card) {
                // Guarda la información del item antes de ocultarlo
                itemsOcultos.push({
                    id: id,
                    html: card.outerHTML
                });

                // Remover el elemento completamente del DOM para que no afecte la paginación
                card.remove();

                // Mostrar botón para mostrar inactivos si hay elementos ocultos
                if (itemsOcultos.length > 0) {
                    $('#btnMostrarInactivos').show();
                }

                // Recalcular paginación
                actualizarPaginacion();
            }
        }

        // Función para recalcular la paginación después de ocultar un producto
        function actualizarPaginacion() {
            const items = Array.from(document.querySelectorAll('.payment-card'));
            const totalItems = items.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            currentPage = 1;
            showPage(currentPage);
        }


        // Función para crear y mostrar notificaciones
        function showNotification(title, items, type) {
            const notificationContainer = document.getElementById('notificationContainer');

            // Crear el elemento de notificación
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;

            // Crear el encabezado de la notificación
            const header = document.createElement('div');
            header.className = 'notification-header';

            const titleEl = document.createElement('h5');
            titleEl.className = 'notification-title';

            // Añadir icono según el tipo
            const icon = document.createElement('i');
            if (type === 'danger') {
                icon.className = 'fas fa-exclamation-triangle';
            } else if (type === 'warning') {
                icon.className = 'fas fa-clock';
            }
            titleEl.appendChild(icon);
            titleEl.appendChild(document.createTextNode(title));

            const closeBtn = document.createElement('button');
            closeBtn.className = 'notification-close';
            closeBtn.innerHTML = '&times;';
            closeBtn.addEventListener('click', function () {
                notification.remove();
            });

            header.appendChild(titleEl);
            header.appendChild(closeBtn);

            // Crear el cuerpo de la notificación
            const body = document.createElement('div');
            body.className = 'notification-body';

            // Crear la lista de elementos
            const list = document.createElement('ul');
            list.className = 'notification-list';

            items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.className = 'notification-item';
                listItem.textContent = item;
                list.appendChild(listItem);
            });

            body.appendChild(list);

            // Ensamblar la notificación
            notification.appendChild(header);
            notification.appendChild(body);

            // Añadir la notificación al contenedor
            notificationContainer.appendChild(notification);

            // Eliminar la notificación después de un tiempo
            setTimeout(() => {
                notification.remove();
            }, 10000); // 10 segundos
        }

        // Toggle submenu functionality
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', function () {
                // Close all other open submenus
                document.querySelectorAll('.submenu').forEach(submenu => {
                    if (submenu !== this.nextElementSibling) {
                        submenu.classList.remove('active');
                        this.classList.remove('active');
                    }
                });

                // Toggle the clicked submenu
                const submenu = this.nextElementSibling;
                if (submenu) {
                    submenu.classList.toggle('active');
                    this.classList.toggle('active');
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            // Paginación
            const itemsPerPage = 8;
            const items = Array.from(document.querySelectorAll('.payment-card'));
            const totalItems = items.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const paginationContainer = document.getElementById('paginationCards');

            let currentPage = 1;

            function showPage(pageNumber) {
                const items = Array.from(document.querySelectorAll('.payment-card'));
                const startIndex = (pageNumber - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;

                items.forEach((item, index) => {
                    item.style.display = (index >= startIndex && index < endIndex) ? 'block' : 'none';
                });

                updatePagination(pageNumber);
            }

            function updatePagination(pageNumber) {
                paginationContainer.innerHTML = '';

                for (let i = 1; i <= totalPages; i++) {
                    const pageButton = document.createElement('button');
                    pageButton.innerText = i;
                    pageButton.className = 'page-link';
                    if (i === pageNumber) {
                        pageButton.classList.add('active');
                    }

                    pageButton.addEventListener('click', function () {
                        currentPage = i;
                        showPage(currentPage);
                    });

                    const listItem = document.createElement('li');
                    listItem.className = 'page-item';
                    listItem.appendChild(pageButton);
                    paginationContainer.appendChild(listItem);
                }
            }

            // Mostrar la primera página
            showPage(currentPage);

            // Verificar productos con bajo stock y próximos a vencer
            const lowStockItems = Array.from(document.querySelectorAll('.payment-card[data-low-stock="True"]'));
            const expiringItems = Array.from(document.querySelectorAll('.payment-card[data-expiring="True"]'));
            const expiredItems = Array.from(document.querySelectorAll('.payment-card[data-expired="True"]'));

            // Notificación de productos con bajo stock
            if (lowStockItems.length > 0) {
                const lowStockNames = lowStockItems.map(item => {
                    const name = item.querySelector('.card-product-name').textContent;
                    const quantity = item.querySelector('.info-value').textContent.trim().split('\n')[0].trim();
                    return `${name} (${quantity})`;
                });

                showNotification(
                    `¡Alerta! ${lowStockItems.length} productos con bajo stock`,
                    lowStockNames,
                    'danger'
                );
            }

            // Notificación de productos próximos a vencer o vencidos
            const allExpiringItems = [...expiringItems, ...expiredItems];
            if (allExpiringItems.length > 0) {
                const expiringNames = allExpiringItems.map(item => {
                    const name = item.querySelector('.card-product-name').textContent;
                    const expiryDate = item.querySelector('.card-user').textContent.split('Vence:')[1].trim();
                    const status = item.getAttribute('data-expired') === 'True' ? 'VENCIDO' : 'Próximo a vencer';
                    return `${name} (${status} - ${expiryDate})`;
                });

                showNotification(
                    `¡Alerta! ${allExpiringItems.length} productos próximos a vencer o vencidos`,
                    expiringNames,
                    'warning'
                );
            }
        });
    </script>
</body>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Sistema de calificación por estrellas
        const stars = document.querySelectorAll('.stars input[type="radio"]');
        const ratingValue = document.querySelector('.rating-value');

        // Verificar si hay una calificación inicial
        const checkedStar = document.querySelector('.stars input[type="radio"]:checked');
        if (checkedStar) {
            ratingValue.textContent = checkedStar.value;
        }

        // Manejar eventos de click en estrellas
        stars.forEach(star => {
            star.addEventListener('change', function () {
                ratingValue.textContent = this.value;
            });
        });
    });
</script>