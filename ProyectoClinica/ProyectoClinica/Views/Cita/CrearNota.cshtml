@model ProyectoClinica.Models.Nota_Paciente

@{
    ViewBag.Title = "Crear Nota";
    string nombreUsuario = User.Identity.Name;
}
<link rel="stylesheet" href="~/CSS/Crear.css" />
<link href="~/CSS/VistaGeneral.css" rel="stylesheet" />
<link rel="stylesheet" href="~/CSS/Crear.css" /> @*Link de los estilos*@


<body>
    <div class="container-fluid">
        <!-- Contenedor de notificaciones -->
        <div id="notificationContainer" class="notification-container"></div>

        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 sidebar">
                <div class="sidebar">
                    <div class="p-3 d-flex justify-content-center">
                        <a href="@Url.Action("VistaCita", "Cita")" style="text-decoration: none; display: block;">
                            <img src="~/Imagenes/Logo.png" alt="Centro Integral Santo Domingo Logo" class="img-fluid" style="max-width: 195px; height: auto;" />
                        </a>
                    </div>

                    <center><div class="nav-header">Plataforma</div></center>
                    <div class="nav flex-column">
                        <a href="@Url.Action("Index", "Cita")" class="nav-link">
                            <i class="fas fa-calendar-alt"></i> Cita
                        </a>
                        <a href="@Url.Action("AtencionCliente", "Cita")" class="nav-link">
                            <i class="fas fa-comments"></i> Comentarios
                        </a>
                    </div>
                    <hr />

                    <center><div class="nav-header">Información</div></center>
                    <div class="nav flex-column">
                        <a href="@Url.Action("Especialidad", "Cita")" class="nav-link">
                            <i class="fas fa-stethoscope"></i> Especialidad
                        </a>
                        <a href="@Url.Action("Contactanos", "Cita")" class="nav-link">
                            <i class="fas fa-phone-alt"></i> Contáctanos
                        </a>
                        <a href="@Url.Action("Ubicacion", "Cita")" class="nav-link">
                            <i class="fas fa-map-marker-alt"></i> Ubicación
                        </a>
                    </div>

                </div>
            </div>

            <!-- Main Content -->
            <div class="col-md-9 col-lg-10 ms-auto button-container">
                <div class="container-form">
                    <h2 class="page-title">Crear Nota</h2>

                    @using (Html.BeginForm())
                    {
                        @Html.AntiForgeryToken()

                        <div class="form-horizontal">
                            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

                            <div class="form-section">
                                <legend>Información de la Nota</legend>
                                <div class="form-grid">
                                    <div class="form-group">
                                        @Html.LabelFor(model => model.Nota_Del_Paciente, new { @class = "control-label" })
                                        @Html.EditorFor(model => model.Nota_Del_Paciente, new { htmlAttributes = new { @class = "form-control" } })
                                        @Html.ValidationMessageFor(model => model.Nota_Del_Paciente, "", new { @class = "text-danger" })
                                        <span class="field-validation-error" style="display: none;" id="error-Nota_Del_Paciente">
                                            La nota del paciente es obligatoria.
                                        </span>
                                    </div>

                                    <div class="form-group">
                                        <label>Usuario</label>
                                        <input type="text" class="form-control" value="@nombreUsuario" readonly />
                                    </div>
                                </div>
                            </div>

                            <div class="form-group text-center">
                                <input type="submit" value="Guardar" class="btn-primary" />
                                @Html.ActionLink("Regresar", "Index", "Cita", null, new { @class = "btn-secondary" })
                            </div>
                        </div>
                    }
                </div>

            </div>
        </div>
    </div>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        var itemsOcultos = [];

        // Función para ocultar un item
        function ocultarItem(id) {
            var card = document.querySelector('.payment-card[data-id="' + id + '"]');

            if (card) {
                // Guarda la información del item antes de ocultarlo
                itemsOcultos.push({
                    id: id,
                    html: card.outerHTML
                });

                // Remover el elemento completamente del DOM para que no afecte la paginación
                card.remove();

                // Mostrar botón para mostrar inactivos si hay elementos ocultos
                if (itemsOcultos.length > 0) {
                    $('#btnMostrarInactivos').show();
                }

                // Recalcular paginación
                actualizarPaginacion();
            }
        }

        // Función para recalcular la paginación después de ocultar un producto
        function actualizarPaginacion() {
            const items = Array.from(document.querySelectorAll('.payment-card'));
            const totalItems = items.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            currentPage = 1;
            showPage(currentPage);
        }


        // Función para crear y mostrar notificaciones
        function showNotification(title, items, type) {
            const notificationContainer = document.getElementById('notificationContainer');

            // Crear el elemento de notificación
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;

            // Crear el encabezado de la notificación
            const header = document.createElement('div');
            header.className = 'notification-header';

            const titleEl = document.createElement('h5');
            titleEl.className = 'notification-title';

            // Añadir icono según el tipo
            const icon = document.createElement('i');
            if (type === 'danger') {
                icon.className = 'fas fa-exclamation-triangle';
            } else if (type === 'warning') {
                icon.className = 'fas fa-clock';
            }
            titleEl.appendChild(icon);
            titleEl.appendChild(document.createTextNode(title));

            const closeBtn = document.createElement('button');
            closeBtn.className = 'notification-close';
            closeBtn.innerHTML = '&times;';
            closeBtn.addEventListener('click', function () {
                notification.remove();
            });

            header.appendChild(titleEl);
            header.appendChild(closeBtn);

            // Crear el cuerpo de la notificación
            const body = document.createElement('div');
            body.className = 'notification-body';

            // Crear la lista de elementos
            const list = document.createElement('ul');
            list.className = 'notification-list';

            items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.className = 'notification-item';
                listItem.textContent = item;
                list.appendChild(listItem);
            });

            body.appendChild(list);

            // Ensamblar la notificación
            notification.appendChild(header);
            notification.appendChild(body);

            // Añadir la notificación al contenedor
            notificationContainer.appendChild(notification);

            // Eliminar la notificación después de un tiempo
            setTimeout(() => {
                notification.remove();
            }, 10000); // 10 segundos
        }

        // Toggle submenu functionality
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', function () {
                // Close all other open submenus
                document.querySelectorAll('.submenu').forEach(submenu => {
                    if (submenu !== this.nextElementSibling) {
                        submenu.classList.remove('active');
                        this.classList.remove('active');
                    }
                });

                // Toggle the clicked submenu
                const submenu = this.nextElementSibling;
                if (submenu) {
                    submenu.classList.toggle('active');
                    this.classList.toggle('active');
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            // Paginación
            const itemsPerPage = 8;
            const items = Array.from(document.querySelectorAll('.payment-card'));
            const totalItems = items.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const paginationContainer = document.getElementById('paginationCards');

            let currentPage = 1;

            function showPage(pageNumber) {
                const items = Array.from(document.querySelectorAll('.payment-card'));
                const startIndex = (pageNumber - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;

                items.forEach((item, index) => {
                    item.style.display = (index >= startIndex && index < endIndex) ? 'block' : 'none';
                });

                updatePagination(pageNumber);
            }

            function updatePagination(pageNumber) {
                paginationContainer.innerHTML = '';

                for (let i = 1; i <= totalPages; i++) {
                    const pageButton = document.createElement('button');
                    pageButton.innerText = i;
                    pageButton.className = 'page-link';
                    if (i === pageNumber) {
                        pageButton.classList.add('active');
                    }

                    pageButton.addEventListener('click', function () {
                        currentPage = i;
                        showPage(currentPage);
                    });

                    const listItem = document.createElement('li');
                    listItem.className = 'page-item';
                    listItem.appendChild(pageButton);
                    paginationContainer.appendChild(listItem);
                }
            }

            // Mostrar la primera página
            showPage(currentPage);

            // Verificar productos con bajo stock y próximos a vencer
            const lowStockItems = Array.from(document.querySelectorAll('.payment-card[data-low-stock="True"]'));
            const expiringItems = Array.from(document.querySelectorAll('.payment-card[data-expiring="True"]'));
            const expiredItems = Array.from(document.querySelectorAll('.payment-card[data-expired="True"]'));

            // Notificación de productos con bajo stock
            if (lowStockItems.length > 0) {
                const lowStockNames = lowStockItems.map(item => {
                    const name = item.querySelector('.card-product-name').textContent;
                    const quantity = item.querySelector('.info-value').textContent.trim().split('\n')[0].trim();
                    return `${name} (${quantity})`;
                });

                showNotification(
                    `¡Alerta! ${lowStockItems.length} productos con bajo stock`,
                    lowStockNames,
                    'danger'
                );
            }

            // Notificación de productos próximos a vencer o vencidos
            const allExpiringItems = [...expiringItems, ...expiredItems];
            if (allExpiringItems.length > 0) {
                const expiringNames = allExpiringItems.map(item => {
                    const name = item.querySelector('.card-product-name').textContent;
                    const expiryDate = item.querySelector('.card-user').textContent.split('Vence:')[1].trim();
                    const status = item.getAttribute('data-expired') === 'True' ? 'VENCIDO' : 'Próximo a vencer';
                    return `${name} (${status} - ${expiryDate})`;
                });

                showNotification(
                    `¡Alerta! ${allExpiringItems.length} productos próximos a vencer o vencidos`,
                    expiringNames,
                    'warning'
                );
            }
        });
    </script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const notaInput = document.getElementById('Nota_Del_Paciente');
            const errorSpan = document.getElementById('error-Nota_Del_Paciente');

            // Validar cuando el usuario deja el campo
            notaInput.addEventListener('blur', function () {
                if (notaInput.value.trim() === "") {
                    errorSpan.style.display = 'inline';
                } else {
                    errorSpan.style.display = 'none';
                }
            });

            // Validar cuando se envía el formulario
            document.querySelector('form').addEventListener('submit', function (e) {
                if (notaInput.value.trim() === "") {
                    errorSpan.style.display = 'inline';
                    e.preventDefault(); // Evita el envío del formulario
                } else {
                    errorSpan.style.display = 'none';
                }
            });
        });
    </script>




</body>


