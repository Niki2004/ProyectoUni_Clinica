@model IEnumerable<ProyectoClinica.Models.Nota_Paciente>

@{
    ViewBag.Title = "Notas Personales";
}

<link href="~/CSS/VistaCIta.css" rel="stylesheet" />

<div class="container-fluid">
    <div class="row mb-4">
        <div class="col-12 d-flex justify-content-between align-items-center">
            <h2 class="text-center flex-grow-1 mb-0 medical-title">Notas Personales</h2>
            <a href="@Url.Action("Index", "Perfil")" class="btn custom-medical-btn">
                <i class="fas fa-home me-2"></i>Inicio
            </a>
        </div>
    </div>

    @* Mensajes de notificación *@
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-medical-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-medical-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <div class="row g-4" id="notasContainer">
        @foreach (var item in Model)
        {
            <div class="col-12 col-md-6 col-lg-4 nota-item">
                <div class="card medical-appointment-card">
                    <div class="card-header medical-card-header">
                        <div class="d-flex justify-content-between align-items-center">
                            <div class="appointment-header-title">
                                <i class="fas fa-calendar-alt me-2"></i>Nota Personal
                            </div>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-12">
                                <div class="medical-info-row">
                                    <div class="medical-info-content">
                                        <i class="fas fa-file-alt" style="color: #ACC196; margin-right: 5px;"></i> <span class="medical-info-label">Descripción:</span>
                                        @item.Nota_Del_Paciente
                                    </div>
                                </div>

                            </div>
                        </div>
                    </div>
                    <div class="card-footer medical-card-footer">
                        <a href="@Url.Action("EditarNota", "Perfil", new { id = item.Id_Nota_Paciente })"
                           class="btn btn-medical-edit me-2"
                           data-bs-toggle="tooltip"
                           title="Editar Nota">
                            <i class="fas fa-edit me-2"></i>Editar
                        </a>

                        @using (Html.BeginForm("EliminarNota", "Perfil", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            @Html.Hidden("id", item.Id_Nota_Paciente)

                            <button type="submit" class="btn btn-medical-delete" data-bs-toggle="tooltip" title="Eliminar Nota">
                                <i class="fas fa-trash-alt"></i> Eliminar
                            </button>
                        }
                    </div>
                </div>
            </div>
        }
    </div>

    @* No hay notas *@
    @if (!Model.Any())
    {
        <div class="text-center mt-5 medical-empty-state">
            <i class="fas fa-inbox fa-4x mb-3"></i>
            <h4>No hay notas personales registradas</h4>
        </div>
    }

    <!-- Contenedor para la paginación -->
    <div id="paginationNotas" class="pagination-container"></div>
</div>

<style>
    /* Pagination Styles */
    .pagination-container {
        margin-top: 2rem;
        margin-bottom: 2rem;
    }

    .pagination {
        display: flex;
        padding-left: 0;
        list-style: none;
        border-radius: 0.25rem;
    }

    .page-item:first-child .page-link {
        margin-left: 0;
        border-top-left-radius: 0.25rem;
        border-bottom-left-radius: 0.25rem;
    }

    .page-item:last-child .page-link {
        border-top-right-radius: 0.25rem;
        border-bottom-right-radius: 0.25rem;
    }

    .page-item.active .page-link {
        z-index: 3;
        color: #fff;
        background-color: #0b7b82;
        border-color: #0b7b82;
    }

    .page-item.disabled .page-link {
        color: #6c757d;
        pointer-events: none;
        cursor: auto;
        background-color: #fff;
        border-color: #dee2e6;
    }

    .page-link {
        position: relative;
        display: block;
        padding: 0.5rem 0.75rem;
        margin-left: -1px;
        line-height: 1.25;
        color: #0b7b82;
        background-color: #fff;
        border: 1px solid #dee2e6;
    }

        .page-link:hover {
            z-index: 2;
            color: #064a4e;
            text-decoration: none;
            background-color: #e9ecef;
            border-color: #dee2e6;
        }

        .page-link:focus {
            z-index: 3;
            outline: 0;
            box-shadow: 0 0 0 0.2rem rgba(11, 123, 130, 0.25);
        }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Inicializar tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        // Configuración de paginación
        const itemsPerPage = 6; // 6 notas por página (2 filas de 3 en pantallas grandes)
        const items = Array.from(document.querySelectorAll('.nota-item'));
        const totalItems = items.length;
        const totalPages = Math.ceil(totalItems / itemsPerPage);
        const paginationContainer = document.getElementById('paginationNotas');

        let currentPage = 1;

        function showPage(pageNumber) {
            const startIndex = (pageNumber - 1) * itemsPerPage;
            const endIndex = startIndex + itemsPerPage;

            items.forEach((item, index) => {
                item.style.display = (index >= startIndex && index < endIndex) ? 'block' : 'none';
            });

            updatePagination(pageNumber);
        }

        function updatePagination(pageNumber) {
            paginationContainer.innerHTML = '';

            // Create pagination container
            const paginationNav = document.createElement('nav');
            paginationNav.setAttribute('aria-label', 'Navegación de página');

            const paginationUl = document.createElement('ul');
            paginationUl.className = 'pagination justify-content-center';

            // Previous button
            const prevLi = document.createElement('li');
            prevLi.className = 'page-item ' + (pageNumber === 1 ? 'disabled' : '');

            const prevLink = document.createElement('a');
            prevLink.className = 'page-link';
            prevLink.href = '#';
            prevLink.setAttribute('aria-label', 'Anterior');
            prevLink.innerHTML = '<span aria-hidden="true">&laquo;</span>';

            prevLink.addEventListener('click', function (e) {
                e.preventDefault();
                if (pageNumber > 1) {
                    showPage(pageNumber - 1);
                }
            });

            prevLi.appendChild(prevLink);
            paginationUl.appendChild(prevLi);

            // Page numbers
            const maxVisiblePages = 5;
            let startPage = Math.max(1, pageNumber - Math.floor(maxVisiblePages / 2));
            let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

            if (endPage - startPage + 1 < maxVisiblePages && startPage > 1) {
                startPage = Math.max(1, endPage - maxVisiblePages + 1);
            }

            // First page link if needed
            if (startPage > 1) {
                const firstLi = document.createElement('li');
                firstLi.className = 'page-item';

                const firstLink = document.createElement('a');
                firstLink.className = 'page-link';
                firstLink.href = '#';
                firstLink.textContent = '1';

                firstLink.addEventListener('click', function (e) {
                    e.preventDefault();
                    showPage(1);
                });

                firstLi.appendChild(firstLink);
                paginationUl.appendChild(firstLi);

                if (startPage > 2) {
                    const ellipsisLi = document.createElement('li');
                    ellipsisLi.className = 'page-item disabled';

                    const ellipsisSpan = document.createElement('span');
                    ellipsisSpan.className = 'page-link';
                    ellipsisSpan.innerHTML = '&hellip;';

                    ellipsisLi.appendChild(ellipsisSpan);
                    paginationUl.appendChild(ellipsisLi);
                }
            }

            // Page number buttons
            for (let i = startPage; i <= endPage; i++) {
                const pageLi = document.createElement('li');
                pageLi.className = 'page-item ' + (i === pageNumber ? 'active' : '');

                const pageLink = document.createElement('a');
                pageLink.className = 'page-link';
                pageLink.href = '#';
                pageLink.textContent = i;

                pageLink.addEventListener('click', function (e) {
                    e.preventDefault();
                    showPage(i);
                });

                pageLi.appendChild(pageLink);
                paginationUl.appendChild(pageLi);
            }

            // Last page link if needed
            if (endPage < totalPages) {
                if (endPage < totalPages - 1) {
                    const ellipsisLi = document.createElement('li');
                    ellipsisLi.className = 'page-item disabled';

                    const ellipsisSpan = document.createElement('span');
                    ellipsisSpan.className = 'page-link';
                    ellipsisSpan.innerHTML = '&hellip;';

                    ellipsisLi.appendChild(ellipsisSpan);
                    paginationUl.appendChild(ellipsisLi);
                }

                const lastLi = document.createElement('li');
                lastLi.className = 'page-item';

                const lastLink = document.createElement('a');
                lastLink.className = 'page-link';
                lastLink.href = '#';
                lastLink.textContent = totalPages;

                lastLink.addEventListener('click', function (e) {
                    e.preventDefault();
                    showPage(totalPages);
                });

                lastLi.appendChild(lastLink);
                paginationUl.appendChild(lastLi);
            }

            // Next button
            const nextLi = document.createElement('li');
            nextLi.className = 'page-item ' + (pageNumber === totalPages ? 'disabled' : '');

            const nextLink = document.createElement('a');
            nextLink.className = 'page-link';
            nextLink.href = '#';
            nextLink.setAttribute('aria-label', 'Siguiente');
            nextLink.innerHTML = '<span aria-hidden="true">&raquo;</span>';

            nextLink.addEventListener('click', function (e) {
                e.preventDefault();
                if (pageNumber < totalPages) {
                    showPage(pageNumber + 1);
                }
            });

            nextLi.appendChild(nextLink);
            paginationUl.appendChild(nextLi);

            paginationNav.appendChild(paginationUl);
            paginationContainer.appendChild(paginationNav);
        }

        // Show the first page when the document is ready
        if (totalItems > 0) {
            showPage(1);
        } else {
            // No need to show pagination if there are no items
            paginationContainer.style.display = 'none';
        }
    });
</script>