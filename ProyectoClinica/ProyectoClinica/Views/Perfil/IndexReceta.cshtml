@model ProyectoClinica.Models.RecetaViewModel

@{
    ViewBag.Title = "Recetas";
}

<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Recetas</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link href="~/CSS/Tablas.css" rel="stylesheet" />

</head>
<body>
    <div class="header-container" style="display: flex; justify-content: center; align-items: center; width: 100%; margin: 0 auto; max-width: 1200px;">
        <div class="header-container" style="display: flex; justify-content: center; align-items: center; width: 100%; margin: 0 auto; max-width: 1200px;">
            <div style="display: flex; align-items: center; justify-content: space-between; width: 100%;">
                <a href="@Url.Action("Index", "Perfil")" class="btn-inicio" style="margin-bottom: 20px; margin-top: 10px;">
                    <i class="fas fa-home"></i> Inicio
                </a>
                <div class="page-title-container" style="position: absolute; left: 50%; transform: translateX(-50%);">
                    <h1 class="page-title">Recetas Médicas</h1>
                </div>
            </div>
        </div>
    </div>

    <br>
    <br>

    <!-- Contenedor de notificaciones -->
    <div id="notificationContainer" class="notification-container"></div>

    <!-- Tarjetas de Recetas -->
    <div class="cards-container">
        @foreach (var receta in Model.Recetas)
        {
            <div class="payment-card">
                <div class="card-status-chip @(receta.Duracion_Tratamiento.Contains("finalizado") ? "estado-contabilidad-pagado" : "estado-contabilidad-pendiente")">
                    @(receta.Duracion_Tratamiento.Contains("finalizado") ? "Completado" : "En Tratamiento")
                </div>
                <div class="card-header">
                    <div class="card-id">Receta #@receta.Id_receta</div>
                    <div class="card-date">@receta.Fecha_Creacion.ToShortDateString()</div>
                </div>
                <div class="card-body">
                    <div class="card-info">
                        <div class="info-label">Nombre de la Receta:</div>
                        <div class="info-value">@receta.Nombre_Receta</div>
                    </div>
                    <div class="card-info">
                        <div class="info-label">Duración del tratamiento:</div>
                        <div class="info-value">@receta.Duracion_Tratamiento</div>
                    </div>
                    <div class="card-info">
                        <div class="info-label">Cantidad requerida:</div>
                        <div class="info-value">@receta.Cantidad_Requerida</div>
                    </div>
                    <div class="card-info">
                        <div class="info-label">Motivo de solicitud:</div>
                        <div class="info-value">@receta.Motivo_Solicitud</div>
                    </div>
                    <div class="card-info">
                        <div class="info-label">Comentarios:</div>
                        <div class="info-value">
                            @foreach (var mod in Model.Modificaciones.Where(m => m.Id_receta == receta.Id_receta))
                            {
                                var comentarioClase = mod.Consentimiento == "Negado" ? "text-danger" :
                                    (mod.Consentimiento == "Aprobado" ? "text-success" : "text-muted");

                                <div class="@comentarioClase" style="margin-bottom: 8px;">
                                    <strong>Estado:</strong> @mod.Consentimiento <br>
                                    <strong>Fecha:</strong> @mod.Fecha_Modificacion.ToShortDateString() <br>
                                    <strong>Motivo:</strong> @mod.motivo_modificacion
                                </div>
                            }
                            @if (!Model.Modificaciones.Any(m => m.Id_receta == receta.Id_receta))
                            {
                                <span>Sin comentarios</span>
                            }
                        </div>
                    </div>
                </div>
                <div class="card-footer">
                    <div class="card-user">
                        <i class="fas fa-prescription"></i> ID: @receta.Id_receta
                    </div>
                </div>
            </div>
        }
        @if (!Model.Recetas.Any())
        {
            <div class="text-center mt-5 medical-empty-state">
                <i class="fas fa-inbox fa-4x mb-3"></i>
                <h4>No hay recetas médicas registradas</h4>
            </div>
        }
    </div>

    <div id="paginationRecetas" class="d-flex justify-content-center mt-3"></div>
</body>
</html>

@section Scripts {
    <script>
        $(document).ready(function () {
            var rowsPerPage = 5;
            var $cards = $(".payment-card");
            var totalPagesCards = Math.ceil($cards.length / rowsPerPage);
            var currentPageCards = 1;

            function showPage(page, items, totalPages, container) {
                var start = (page - 1) * rowsPerPage;
                var end = start + rowsPerPage;

                items.hide().slice(start, end).show();
                $(container).html(createPagination(page, totalPages, container));
            }

            function createPagination(page, total, container) {
                var pagination = `<nav><ul class="pagination">`;

                if (page > 1) {
                    pagination += `<li class="page-item"><a href="#" class="page-link" data-page="${page - 1}" data-container="${container}">«</a></li>`;
                }

                for (var i = 1; i <= total; i++) {
                    pagination += `<li class="page-item ${i === page ? 'active' : ''}">
                                     <a href="#" class="page-link" data-page="${i}" data-container="${container}">${i}</a>
                                   </li>`;
                }

                if (page < total) {
                    pagination += `<li class="page-item"><a href="#" class="page-link" data-page="${page + 1}" data-container="${container}">»</a></li>`;
                }

                pagination += `</ul></nav>`;
                return pagination;
            }

            $(document).on("click", ".page-link", function (e) {
                e.preventDefault();
                var page = $(this).data("page");
                var container = $(this).data("container");

                if (container === "#paginationRecetas") {
                    showPage(page, $cards, totalPagesCards, "#paginationRecetas");
                }
            });

            showPage(currentPageCards, $cards, totalPagesCards, "#paginationRecetas");
        });

        // Función para crear y mostrar notificaciones
        function showNotification(title, items, type) {
            const notificationContainer = document.getElementById('notificationContainer');

            // Crear el elemento de notificación
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;

            // Crear el encabezado de la notificación
            const header = document.createElement('div');
            header.className = 'notification-header';

            const titleEl = document.createElement('h5');
            titleEl.className = 'notification-title';

            // Añadir icono según el tipo
            const icon = document.createElement('i');
            if (type === 'danger') {
                icon.className = 'fas fa-exclamation-triangle';
            } else if (type === 'warning') {
                icon.className = 'fas fa-clock';
            }
            titleEl.appendChild(icon);
            titleEl.appendChild(document.createTextNode(title));

            const closeBtn = document.createElement('button');
            closeBtn.className = 'notification-close';
            closeBtn.innerHTML = '&times;';
            closeBtn.addEventListener('click', function () {
                notification.remove();
            });

            header.appendChild(titleEl);
            header.appendChild(closeBtn);

            // Crear el cuerpo de la notificación
            const body = document.createElement('div');
            body.className = 'notification-body';

            // Crear la lista de elementos
            const list = document.createElement('ul');
            list.className = 'notification-list';

            items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.className = 'notification-item';
                listItem.textContent = item;
                list.appendChild(listItem);
            });

            body.appendChild(list);

            // Ensamblar la notificación
            notification.appendChild(header);
            notification.appendChild(body);

            // Añadir la notificación al contenedor
            notificationContainer.appendChild(notification);

            // Eliminar la notificación después de un tiempo
            setTimeout(() => {
                notification.remove();
            }, 10000); // 10 segundos
        }

        var itemsOcultos = [];

        // Función para ocultar un item
        function ocultarItem(id) {
            var card = document.querySelector('.payment-card[data-id="' + id + '"]');

            if (card) {
                // Guarda la información del item antes de ocultarlo
                itemsOcultos.push({
                    id: id,
                    html: card.outerHTML
                });

                // Remover el elemento completamente del DOM para que no afecte la paginación
                card.remove();

                // Mostrar botón para mostrar inactivos si hay elementos ocultos
                if (itemsOcultos.length > 0) {
                    $('#btnMostrarInactivos').show();
                }

                // Recalcular paginación
                actualizarPaginacion();
            }
        }

        // Función para recalcular la paginación después de ocultar un producto
        function actualizarPaginacion() {
            const items = Array.from(document.querySelectorAll('.payment-card'));
            const totalItems = items.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            currentPage = 1;
            showPage(currentPage);
        }
    </script>
}