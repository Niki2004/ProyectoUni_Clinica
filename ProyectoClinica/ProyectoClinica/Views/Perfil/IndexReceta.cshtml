@model ProyectoClinica.Models.RecetaViewModel

@{
    ViewBag.Title = "Receta";
}

<link href="~/CSS/VistaGeneral.css" rel="stylesheet" />
<link href="~/CSS/Receta.css" rel="stylesheet" />

<body>
    <div class="container-fluid">
        <!-- Contenedor de notificaciones -->
        <div id="notificationContainer" class="notification-container"></div>

        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 sidebar">
                <div class="sidebar">
                    <div class="p-3 d-flex justify-content-center">
                        <a href="@Url.Action("VistaCita", "Cita")" style="text-decoration: none; display: block;">
                            <img src="~/Imagenes/Logo.png" alt="Centro Integral Santo Domingo Logo" class="img-fluid" style="max-width: 195px; height: auto;" />
                        </a>
                    </div>

                    <center><div class="nav-header">Plataforma</div></center>
                    <div class="nav flex-column">
                        <a class="nav-link">
                            <i class="fas fa-calendar-alt"></i> Cita
                        </a>
                        <a href="@Url.Action("AtencionCliente", "Cita")" class="nav-link">
                            <i class="fas fa-comments"></i> Comentarios
                        </a>
                    </div>
                    <hr />

                    <center><div class="nav-header">Información</div></center>
                    <div class="nav flex-column">
                        <a href="@Url.Action("Especialidad", "Cita")" class="nav-link">
                            <i class="fas fa-stethoscope"></i> Especialidad
                        </a>
                        <a href="@Url.Action("Contactanos", "Cita")" class="nav-link">
                            <i class="fas fa-phone-alt"></i> Contáctanos
                        </a>
                        <a href="@Url.Action("Ubicacion", "Cita")" class="nav-link">
                            <i class="fas fa-map-marker-alt"></i> Ubicación
                        </a>
                    </div>

                </div>
            </div>

            <!-- Main Content -->
            <div class="col-md-9 col-lg-10 ms-auto button-container">

                <div style="text-align: center; margin-bottom: 20px;">
                    <a href="@Url.Action("Index", "Perfil")" class="custom-btn">
                        <i class="fas fa-home"></i> Inicio
                    </a>
                </div>


                <div class="container">
                    <div class="text-center">
                        <img src="~/Imagenes/Logo.png" alt="Centro Integral Santo Domingo" class="img-fluid mb-3" style="opacity: 0.10;">
                    </div>

                    @foreach (var receta in Model.Recetas)
                    {
                        <div class="card shadow-lg p-4 mt-4">
                            <h3 class="text-dark">Receta</h3>
                            <hr>
                            <p style="color: #0b7b82;"><strong>Detalles:</strong></p>
                            <ul>
                                <li><strong>Nombre:</strong> @receta.Nombre_Receta</li>
                                <li><strong>Fecha:</strong> @receta.Fecha_Creacion.ToShortDateString()</li>
                                <li><strong>Duración del tratamiento:</strong> @receta.Duracion_Tratamiento</li>
                                <li><strong>Cantidad requerida:</strong> @receta.Cantidad_Requerida</li>
                                <li><strong>Motivo de solicitud:</strong> @receta.Motivo_Solicitud</li>
                            </ul>
                            <p style="color: #0b7b82;"><strong>Comentario</strong></p>
                            <ul>
                                @foreach (var mod in Model.Modificaciones.Where(m => m.Id_receta == receta.Id_receta))
                                {
                                    var panelClase = mod.Consentimiento == "Negado" ? "bg-danger text-white" : (mod.Consentimiento == "Aprobado" ? "bg-success text-white" : "bg-light");

                                    <li>
                                        <div class="panel @panelClase p-3 mb-2">
                                            <strong>Doctor:</strong> @mod.Consentimiento <br>
                                            <strong>Fecha:</strong> @mod.Fecha_Modificacion.ToShortDateString() <br>
                                            <strong>Motivo de modificación:</strong> @mod.motivo_modificacion
                                        </div>
                                    </li>
                                }
                            </ul>

                        </div>
                    }
                </div>
                <br />
                <div id="paginationRecetas" class="pagination-container"></div>

            </div>
        </div>
    </div>


    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        var itemsOcultos = [];

        // Función para ocultar un item
        function ocultarItem(id) {
            var card = document.querySelector('.payment-card[data-id="' + id + '"]');

            if (card) {
                // Guarda la información del item antes de ocultarlo
                itemsOcultos.push({
                    id: id,
                    html: card.outerHTML
                });

                // Remover el elemento completamente del DOM para que no afecte la paginación
                card.remove();

                // Mostrar botón para mostrar inactivos si hay elementos ocultos
                if (itemsOcultos.length > 0) {
                    $('#btnMostrarInactivos').show();
                }

                // Recalcular paginación
                actualizarPaginacion();
            }
        }

        // Función para recalcular la paginación después de ocultar un producto
        function actualizarPaginacion() {
            const items = Array.from(document.querySelectorAll('.payment-card'));
            const totalItems = items.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            currentPage = 1;
            showPage(currentPage);
        }


        // Función para crear y mostrar notificaciones
        function showNotification(title, items, type) {
            const notificationContainer = document.getElementById('notificationContainer');

            // Crear el elemento de notificación
            const notification = document.createElement('div');
            notification.className = `notification notification-${type}`;

            // Crear el encabezado de la notificación
            const header = document.createElement('div');
            header.className = 'notification-header';

            const titleEl = document.createElement('h5');
            titleEl.className = 'notification-title';

            // Añadir icono según el tipo
            const icon = document.createElement('i');
            if (type === 'danger') {
                icon.className = 'fas fa-exclamation-triangle';
            } else if (type === 'warning') {
                icon.className = 'fas fa-clock';
            }
            titleEl.appendChild(icon);
            titleEl.appendChild(document.createTextNode(title));

            const closeBtn = document.createElement('button');
            closeBtn.className = 'notification-close';
            closeBtn.innerHTML = '&times;';
            closeBtn.addEventListener('click', function () {
                notification.remove();
            });

            header.appendChild(titleEl);
            header.appendChild(closeBtn);

            // Crear el cuerpo de la notificación
            const body = document.createElement('div');
            body.className = 'notification-body';

            // Crear la lista de elementos
            const list = document.createElement('ul');
            list.className = 'notification-list';

            items.forEach(item => {
                const listItem = document.createElement('li');
                listItem.className = 'notification-item';
                listItem.textContent = item;
                list.appendChild(listItem);
            });

            body.appendChild(list);

            // Ensamblar la notificación
            notification.appendChild(header);
            notification.appendChild(body);

            // Añadir la notificación al contenedor
            notificationContainer.appendChild(notification);

            // Eliminar la notificación después de un tiempo
            setTimeout(() => {
                notification.remove();
            }, 10000); // 10 segundos
        }

        // Toggle submenu functionality
        document.querySelectorAll('.nav-link').forEach(link => {
            link.addEventListener('click', function () {
                // Close all other open submenus
                document.querySelectorAll('.submenu').forEach(submenu => {
                    if (submenu !== this.nextElementSibling) {
                        submenu.classList.remove('active');
                        this.classList.remove('active');
                    }
                });

                // Toggle the clicked submenu
                const submenu = this.nextElementSibling;
                if (submenu) {
                    submenu.classList.toggle('active');
                    this.classList.toggle('active');
                }
            });
        });

        document.addEventListener('DOMContentLoaded', function () {
            // Paginación
            const itemsPerPage = 8;
            const items = Array.from(document.querySelectorAll('.payment-card'));
            const totalItems = items.length;
            const totalPages = Math.ceil(totalItems / itemsPerPage);
            const paginationContainer = document.getElementById('paginationCards');

            let currentPage = 1;

            function showPage(pageNumber) {
                const items = Array.from(document.querySelectorAll('.payment-card'));
                const startIndex = (pageNumber - 1) * itemsPerPage;
                const endIndex = startIndex + itemsPerPage;

                items.forEach((item, index) => {
                    item.style.display = (index >= startIndex && index < endIndex) ? 'block' : 'none';
                });

                updatePagination(pageNumber);
            }

            function updatePagination(pageNumber) {
                paginationContainer.innerHTML = '';

                for (let i = 1; i <= totalPages; i++) {
                    const pageButton = document.createElement('button');
                    pageButton.innerText = i;
                    pageButton.className = 'page-link';
                    if (i === pageNumber) {
                        pageButton.classList.add('active');
                    }

                    pageButton.addEventListener('click', function () {
                        currentPage = i;
                        showPage(currentPage);
                    });

                    const listItem = document.createElement('li');
                    listItem.className = 'page-item';
                    listItem.appendChild(pageButton);
                    paginationContainer.appendChild(listItem);
                }
            }

            // Mostrar la primera página
            showPage(currentPage);

            // Verificar productos con bajo stock y próximos a vencer
            const lowStockItems = Array.from(document.querySelectorAll('.payment-card[data-low-stock="True"]'));
            const expiringItems = Array.from(document.querySelectorAll('.payment-card[data-expiring="True"]'));
            const expiredItems = Array.from(document.querySelectorAll('.payment-card[data-expired="True"]'));

            // Notificación de productos con bajo stock
            if (lowStockItems.length > 0) {
                const lowStockNames = lowStockItems.map(item => {
                    const name = item.querySelector('.card-product-name').textContent;
                    const quantity = item.querySelector('.info-value').textContent.trim().split('\n')[0].trim();
                    return `${name} (${quantity})`;
                });

                showNotification(
                    `¡Alerta! ${lowStockItems.length} productos con bajo stock`,
                    lowStockNames,
                    'danger'
                );
            }

            // Notificación de productos próximos a vencer o vencidos
            const allExpiringItems = [...expiringItems, ...expiredItems];
            if (allExpiringItems.length > 0) {
                const expiringNames = allExpiringItems.map(item => {
                    const name = item.querySelector('.card-product-name').textContent;
                    const expiryDate = item.querySelector('.card-user').textContent.split('Vence:')[1].trim();
                    const status = item.getAttribute('data-expired') === 'True' ? 'VENCIDO' : 'Próximo a vencer';
                    return `${name} (${status} - ${expiryDate})`;
                });

                showNotification(
                    `¡Alerta! ${allExpiringItems.length} productos próximos a vencer o vencidos`,
                    expiringNames,
                    'warning'
                );
            }
        });
    </script>

    @section Scripts {
        <script>
            document.addEventListener('DOMContentLoaded', function () {
                const itemsPerPage = 5; // You can adjust this number as needed
                const items = Array.from(document.querySelectorAll('.card.shadow-lg'));
                const totalItems = items.length;
                const totalPages = Math.ceil(totalItems / itemsPerPage);
                const paginationContainer = document.getElementById('paginationRecetas');

                let currentPage = 1;

                function showPage(pageNumber) {
                    const startIndex = (pageNumber - 1) * itemsPerPage;
                    const endIndex = startIndex + itemsPerPage;

                    items.forEach((item, index) => {
                        item.style.display = (index >= startIndex && index < endIndex) ? 'block' : 'none';
                    });

                    updatePagination(pageNumber);
                }

                function updatePagination(pageNumber) {
                    paginationContainer.innerHTML = '';

                    // Create pagination container
                    const paginationNav = document.createElement('nav');
                    paginationNav.setAttribute('aria-label', 'Navegación de página');

                    const paginationUl = document.createElement('ul');
                    paginationUl.className = 'pagination justify-content-center';

                    // Previous button
                    const prevLi = document.createElement('li');
                    prevLi.className = 'page-item ' + (pageNumber === 1 ? 'disabled' : '');

                    const prevLink = document.createElement('a');
                    prevLink.className = 'page-link';
                    prevLink.href = '#';
                    prevLink.setAttribute('aria-label', 'Anterior');
                    prevLink.innerHTML = '<span aria-hidden="true">&laquo;</span>';

                    prevLink.addEventListener('click', function (e) {
                        e.preventDefault();
                        if (pageNumber > 1) {
                            showPage(pageNumber - 1);
                        }
                    });

                    prevLi.appendChild(prevLink);
                    paginationUl.appendChild(prevLi);

                    // Page numbers
                    const maxVisiblePages = 5;
                    let startPage = Math.max(1, pageNumber - Math.floor(maxVisiblePages / 2));
                    let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

                    if (endPage - startPage + 1 < maxVisiblePages && startPage > 1) {
                        startPage = Math.max(1, endPage - maxVisiblePages + 1);
                    }

                    // First page link if needed
                    if (startPage > 1) {
                        const firstLi = document.createElement('li');
                        firstLi.className = 'page-item';

                        const firstLink = document.createElement('a');
                        firstLink.className = 'page-link';
                        firstLink.href = '#';
                        firstLink.textContent = '1';

                        firstLink.addEventListener('click', function (e) {
                            e.preventDefault();
                            showPage(1);
                        });

                        firstLi.appendChild(firstLink);
                        paginationUl.appendChild(firstLi);

                        if (startPage > 2) {
                            const ellipsisLi = document.createElement('li');
                            ellipsisLi.className = 'page-item disabled';

                            const ellipsisSpan = document.createElement('span');
                            ellipsisSpan.className = 'page-link';
                            ellipsisSpan.innerHTML = '&hellip;';

                            ellipsisLi.appendChild(ellipsisSpan);
                            paginationUl.appendChild(ellipsisLi);
                        }
                    }

                    // Page number buttons
                    for (let i = startPage; i <= endPage; i++) {
                        const pageLi = document.createElement('li');
                        pageLi.className = 'page-item ' + (i === pageNumber ? 'active' : '');

                        const pageLink = document.createElement('a');
                        pageLink.className = 'page-link';
                        pageLink.href = '#';
                        pageLink.textContent = i;

                        pageLink.addEventListener('click', function (e) {
                            e.preventDefault();
                            showPage(i);
                        });

                        pageLi.appendChild(pageLink);
                        paginationUl.appendChild(pageLi);
                    }

                    // Last page link if needed
                    if (endPage < totalPages) {
                        if (endPage < totalPages - 1) {
                            const ellipsisLi = document.createElement('li');
                            ellipsisLi.className = 'page-item disabled';

                            const ellipsisSpan = document.createElement('span');
                            ellipsisSpan.className = 'page-link';
                            ellipsisSpan.innerHTML = '&hellip;';

                            ellipsisLi.appendChild(ellipsisSpan);
                            paginationUl.appendChild(ellipsisLi);
                        }

                        const lastLi = document.createElement('li');
                        lastLi.className = 'page-item';

                        const lastLink = document.createElement('a');
                        lastLink.className = 'page-link';
                        lastLink.href = '#';
                        lastLink.textContent = totalPages;

                        lastLink.addEventListener('click', function (e) {
                            e.preventDefault();
                            showPage(totalPages);
                        });

                        lastLi.appendChild(lastLink);
                        paginationUl.appendChild(lastLi);
                    }

                    // Next button
                    const nextLi = document.createElement('li');
                    nextLi.className = 'page-item ' + (pageNumber === totalPages ? 'disabled' : '');

                    const nextLink = document.createElement('a');
                    nextLink.className = 'page-link';
                    nextLink.href = '#';
                    nextLink.setAttribute('aria-label', 'Siguiente');
                    nextLink.innerHTML = '<span aria-hidden="true">&raquo;</span>';

                    nextLink.addEventListener('click', function (e) {
                        e.preventDefault();
                        if (pageNumber < totalPages) {
                            showPage(pageNumber + 1);
                        }
                    });

                    nextLi.appendChild(nextLink);
                    paginationUl.appendChild(nextLi);

                    paginationNav.appendChild(paginationUl);
                    paginationContainer.appendChild(paginationNav);
                }

                // Show the first page when the document is ready
                if (totalItems > 0) {
                    showPage(1);
                } else {
                    // Show a message if there are no items
                    const noItemsMsg = document.createElement('p');
                    noItemsMsg.className = 'text-center mt-4 text-muted';
                    noItemsMsg.textContent = 'No hay recetas disponibles.';
                    paginationContainer.appendChild(noItemsMsg);
                }
            });
        </script>
    }
</body>

